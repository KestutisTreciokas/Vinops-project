Heuristic build context detection:
Compose files: -f /root/work/vinops.restore/docker-compose.prod.yml -f /root/work/vinops.restore/docker-compose.db.yml -f /root/work/vinops.restore/docker-compose.hostfix.yml -f /root/work/vinops.restore/docker-compose.health.yml -f /root/work/vinops.restore/docker-compose.yml

services:
  api:
    container_name: vinops_api
    depends_on:
      db:
        condition: service_healthy
        required: true
    environment:
      API_BASE_URL: http://api:3001
      DATABASE_URL: ""
      DB_DATABASE: ""
      DB_HOST: db
      DB_PASSWORD: ""
      DB_PORT: ""
      DB_USERNAME: ""
      NEXT_PUBLIC_SENTRY_DSN: ""
      NODE_ENV: production
      PORT: "3001"
      SENTRY_DSN: ""
    image: ':'
    networks:
      default: null
    ports:
      - mode: ingress
        target: 3001
        published: "3001"
        protocol: tcp
    restart: unless-stopped
  caddy:
    image: caddy:2-alpine
    networks:
      webnet: null
    ports:
      - mode: ingress
        target: 80
        published: "80"
        protocol: tcp
      - mode: ingress
        target: 443
        published: "443"
        protocol: tcp
    restart: unless-stopped
    volumes:
      - type: bind
        source: /root/work/vinops.restore/caddy/Caddyfile
        target: /etc/caddy/Caddyfile
        read_only: true
        bind:
          create_host_path: true
      - type: volume
        source: caddy_data
        target: /data
        volume: {}
      - type: volume
        source: caddy_config
        target: /config
        volume: {}
  db:
    container_name: vinops_db
    environment:
      POSTGRES_DB: ""
      POSTGRES_PASSWORD: ""
      POSTGRES_USER: ""
    healthcheck:
      test:
        - CMD-SHELL
        - 'pg_isready -U  -d '
      timeout: 5s
      interval: 10s
      retries: 10
    image: postgres:16
    networks:
      default: null
    ports:
      - mode: ingress
        target: 5432
        published: "5432"
        protocol: tcp
    volumes:
      - type: volume
        source: db_data
        target: /var/lib/postgresql/data
        volume: {}
  web:
    build:
      context: /root/work/vinops.restore/frontend
      dockerfile: Dockerfile
    container_name: vinops_web
    depends_on:
      api:
        condition: service_started
        required: true
      db:
        condition: service_healthy
        required: true
    environment:
      DATABASE_URL: postgres://vinops:vinops@db:5432/vinops
      DB_DATABASE: ""
      DB_HOST: db
      DB_PASSWORD: ""
      DB_PORT: ""
      DB_USERNAME: ""
      HOST: 0.0.0.0
      NEXT_PUBLIC_API_URL: 'http://:'
      NEXT_PUBLIC_SENTRY_DSN: ""
      NODE_ENV: production
      PORT: "3000"
      SENTRY_DSN: ""
    healthcheck:
      test:
        - CMD-SHELL
        - curl -fsS http://127.0.0.1:3000/health || curl -fsS http://127.0.0.1:3000/en/health || exit 1
      timeout: 3s
      interval: 10s
      retries: 3
      start_period: 20s
    image: ':'
    networks:
      webnet: null
    ports:
      - mode: ingress
        target: 3000
        published: "80"
        protocol: tcp
    restart: unless-stopped
networks:
  default:
    name: vinopsrestore_default
  webnet:
    name: vinopsrestore_webnet
volumes:
  caddy_config:
    name: vinopsrestore_caddy_config
  caddy_data:
    name: vinopsrestore_caddy_data
  db_data:
    name: vinopsrestore_db_data

Notes:
- Ищем сервис web и его build.context/Dockerfile, чтобы понять что попадает в сборку.
- По истории чата ожидается фронтенд: /root/work/vinops.restore/frontend (Next 14, standalone).
