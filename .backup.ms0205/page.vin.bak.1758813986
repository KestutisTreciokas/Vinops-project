import type { Metadata } from 'next';
import { headers } from 'next/headers';
import { isVinValid, normalizeVin } from '@/app/_lib/vin';
import { fetchVehicleSSR } from '@/app/_lib/api';

export const dynamic = 'force-dynamic';
export const revalidate = 0;

type Params = { lang: 'en'|'ru', vin: string };

function baseUrl(): string {
  const h = headers();
  const host = h.get('x-forwarded-host') || h.get('host') || '';
  const proto = (h.get('x-forwarded-proto') || 'https');
  return `${proto}://${host}`;
}

export async function generateMetadata({ params }: { params: Params }): Promise<Metadata> {
  const lang = (params.lang === 'ru' ? 'ru' : 'en') as 'en'|'ru';
  const vin = normalizeVin(params.vin);
  const titleSuffix = 'vinops';

  let title = `VIN ${vin} — ${titleSuffix}`;
  let robots: Metadata['robots'] | undefined;

  if (!isVinValid(vin)) {
    robots = { index: false, follow: true };
  } else {
    const data = await fetchVehicleSSR(vin, lang);
    if (data?.__gone) {
      robots = { index: false, follow: true };
    }
    if (data && !data.__invalid && !data?.__gone) {
      const year = data?.vehicle?.year;
      const make = data?.vehicle?.make;
      const model = data?.vehicle?.model;
      const trim = data?.vehicle?.trim;
      if (year && make && model) {
        title = `${year} ${make} ${model}${trim ? `, ${trim}` : ''} — VIN ${vin} — ${titleSuffix}`;
      }
    }
  }

  return {
    title,
    robots,
  };
}

export default async function Page({ params }: { params: Params }) {
  const lang = (params.lang === 'ru' ? 'ru' : 'en') as 'en'|'ru';
  const vin = normalizeVin(params.vin);

  // INVALID → SSR 404
  if (!isVinValid(vin)) {
    const mod = await import('next/navigation');
    return mod.notFound();
  }

  const data = await fetchVehicleSSR(vin, lang);
  if (data?.__invalid) {
    const mod = await import('next/navigation');
    return mod.notFound();
  }
  const gone = !!data?.__gone;

  const year = data?.vehicle?.year;
  const make = data?.vehicle?.make;
  const model = data?.vehicle?.model;
  const trim = data?.vehicle?.trim;

  const pageTitle = (year && make && model)
    ? `${year} ${make} ${model}`
    : `VIN ${vin}`;

  const prodYearIso = (year ? `${year}-01-01` : undefined);
  const url = `${baseUrl()}/${lang}/vin/${vin}`;
  const ldVehicle = {
    '@context': 'https://schema.org',
    '@type': 'Vehicle',
    vehicleIdentificationNumber: vin,
    ...(make ? { brand: { '@type': 'Brand', name: make } } : {}),
    ...(model ? { model } : {}),
    ...(prodYearIso ? { productionDate: prodYearIso } : {}),
    ...(url ? { url } : {}),
  };
  const ldBreadcrumb = {
    '@context': 'https://schema.org',
    '@type': 'BreadcrumbList',
    itemListElement: [
      { '@type': 'ListItem', position: 1, name: (lang === 'ru' ? 'Главная' : 'Home'), item: `${baseUrl()}/${lang}` },
      { '@type': 'ListItem', position: 2, name: (lang === 'ru' ? 'Каталог' : 'Cars'), item: `${baseUrl()}/${lang}/cars` },
      { '@type': 'ListItem', position: 3, name: `VIN ${vin}`, item: url },
    ],
  };

  return (
    <main className="container mx-auto px-4 py-6">
      <div className="flex items-start justify-between gap-3 mb-2">
        <h1 className="h1">{pageTitle}</h1>
        <span className="badge">{vin}</span>
      </div>

      {/* JSON-LD */}
      <script type="application/ld+json" dangerouslySetInnerHTML={{ __html: JSON.stringify(ldVehicle) }} />
      <script type="application/ld+json" dangerouslySetInnerHTML={{ __html: JSON.stringify(ldBreadcrumb) }} />

      {gone ? (
        <p className="text-sm text-muted-foreground">
          {lang === 'ru' ? 'Страница удалена по запросу (410).' : 'This VIN page was removed by request (410).'}
        </p>
      ) : (
        <>
          <section className="mt-4">
            <h2 className="h2">{lang === 'ru' ? 'Характеристики' : 'Specifications'}</h2>
            <ul className="mt-2 list-disc pl-5 text-sm">
              {year && <li>Year: {year}</li>}
              {make && <li>Make: {make}</li>}
              {model && <li>Model: {model}</li>}
              {trim && <li>Trim: {trim}</li>}
            </ul>
          </section>
        </>
      )}
    </main>
  );
}
