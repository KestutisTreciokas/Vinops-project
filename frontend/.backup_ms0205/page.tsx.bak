import type { Metadata } from 'next'
import { headers } from 'next/headers'

type Lang = 'en' | 'ru';
type SearchParams = {
  make?: string; model?: string;
  year_from?: string; year_to?: string;
  status?: string; damage?: string; title_brand?: string;
  runs_drives?: string; has_keys?: string;
  sort?: string; cursor?: string; limit?: string;
};

type LotCardDto = {
  vin: string;
  year?: number; make?: string; model?: string; trim?: string | null;
  lot_id?: string | number;
  primary_image_url?: string | null;
  location_city?: string | null; location_region?: string | null; location_country?: string | null;
  auction_datetime_utc?: string | null;
  status?: string | null;
};

const ALLOWED_KEYS = new Set([
  'make','model','year_from','year_to','status','damage','title_brand',
  'runs_drives','has_keys','sort','cursor','limit'
]);

function isComplex(sp: URLSearchParams): boolean {
  let cnt = 0;
  for (const [k,v] of sp.entries()) {
    if (!v) continue;
    if (k === 'cursor') return true;
    if (ALLOWED_KEYS.has(k) && k !== 'limit' && k !== 'sort') cnt++;
  }
  return cnt > 2;
}

function clampLimit(n?: number) {
  if (!n || Number.isNaN(n)) return 20;
  return Math.min(50, Math.max(1, n));
}

async function fetchSearch(sp: URLSearchParams, lang: Lang): Promise<{items: LotCardDto[], nextCursor?: string}> {
  // Приводим к whitelisted QS и подставляем лимит
  const qs = new URLSearchParams();
  for (const [k,v] of sp.entries()) {
    if (ALLOWED_KEYS.has(k) && v) qs.set(k, v);
  }
  const limit = clampLimit(Number(sp.get('limit') ?? '20'));
  qs.set('limit', String(limit));
  qs.set('lang', lang);

  // Относительный путь разрешён в серверных компонентов Next
  const res = await fetch(`/api/v1/search?` + qs.toString(), {
    cache: 'no-store',
    next: { revalidate: 0 },
  });
  if (!res.ok) {
    // Не валим SSR — рендерим пустую сетку
    return { items: [] };
  }
  return res.json();
}

type Props = { params: { lang: Lang }, searchParams: SearchParams };

export async function generateMetadata({ params, searchParams }: Props): Promise<Metadata> {
  const sp = new URLSearchParams(Object.entries(searchParams).filter(([_,v]) => v != null) as [string,string][]);
  const complex = isComplex(sp);
  // Дублируем правило robots мета-тегом (периметр уже ставит X-Robots-Tag).
  return {
    robots: complex ? { index: false, follow: true } : { index: true, follow: true },
  };
}

export default async function Page({ params, searchParams }: Props) {
  const lang = params.lang;
  // Собираем исходные query как URLSearchParams
  const sp = new URLSearchParams(Object.entries(searchParams).filter(([_,v]) => v != null) as [string,string][]);
  const data = await fetchSearch(sp, lang);
  const items = Array.isArray(data?.items) ? data.items : [];

  // Простой i18n заголовков
  const t = (en: string, ru: string) => (lang === 'ru' ? ru : en);

  return (
    <main className="container mx-auto px-4 py-6">
      <h1 className="h1 mb-4">{t('Cars', 'Автомобили')}</h1>

      {/* SSR сетка карточек — каждая содержит ссылку на канонический VIN-роут */}
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4" data-ssr="catalog-grid">
        {items.length === 0 && (
          <div className="text-sm text-muted-foreground">{t('No items to display.', 'Нет элементов для отображения.')}</div>
        )}
        {items.map((it) => {
          const vin = (it.vin || '').toUpperCase();
          const href = `/${lang}/vin/${vin}`;
          const title = [it.year, it.make, it.model, it.trim].filter(Boolean).join(' ');
          return (
            <article key={`${vin}-${it.lot_id ?? 'na'}`} className="rounded-2xl shadow p-3 bg-white/60 border">
              <a href={href} data-vin={vin} className="block group">
                <div className="aspect-video w-full overflow-hidden rounded-xl mb-2 bg-slate-100">
                  {it.primary_image_url ? (
                    // Не указываем width/height, чтобы не тянуть опциональные либы — SSR признак нам важнее
                    // В production можно заменить на next/image
                    <img src={it.primary_image_url} alt={title || vin} className="w-full h-full object-cover object-center" loading="lazy" />
                  ) : null}
                </div>
                <h2 className="text-base font-semibold group-hover:underline">
                  {title || t('Lot', 'Лот')} — VIN {vin}
                </h2>
                <div className="text-xs text-muted-foreground mt-1">
                  {it.location_city || ''}{it.location_city && (it.location_region || it.location_country) ? ', ' : ''}
                  {it.location_region || ''}{(it.location_region || it.location_city) && it.location_country ? ', ' : ''}
                  {it.location_country || ''}
                </div>
              </a>
            </article>
          );
        })}
      </div>
    </main>
  );
}
