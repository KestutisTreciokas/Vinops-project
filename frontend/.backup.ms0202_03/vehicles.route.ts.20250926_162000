import { NextRequest, NextResponse } from 'next/server';
import crypto from 'node:crypto';
import { query, hasDb } from '../../_lib/db';

export const runtime = 'nodejs';
export const dynamic = 'force-dynamic';

const API_VERSION = '1';
const ORIGINS = new Set(['https://vinops.online','https://www.vinops.online']);
const RL_LIMIT = Number(process.env.RL_VEHICLES_RPM || 60);
const rl: Map<string, { ts: number; cnt: number }> = (globalThis as any).__vinops_rl || new Map();
(globalThis as any).__vinops_rl = rl;

function nowSec(){ return Math.floor(Date.now()/1000); }
function clientIp(req: NextRequest){
  return req.headers.get('cf-connecting-ip') || req.headers.get('x-forwarded-for') || 'anon';
}
function cors(origin: string|null){
  const h: Record<string,string> = {
    'Access-Control-Allow-Methods': 'GET,OPTIONS',
    'Access-Control-Allow-Headers': 'Content-Type, If-None-Match, If-Modified-Since, Accept-Language',
    'Vary': 'Origin, Accept-Language',
    'X-Api-Version': API_VERSION
  };
  if (origin && ORIGINS.has(origin)) h['Access-Control-Allow-Origin'] = origin;
  return h;
}
function normalizeVin(v: string){
  const up = (v||'').toUpperCase().trim();
  if (up.length < 11 || up.length > 17) return { ok:false, reason:'LEN' as const };
  if (!/^[A-Z0-9]+$/.test(up)) return { ok:false, reason:'CHAR' as const };
  if (up.length === 17 && /[IOQ]/.test(up)) return { ok:false, reason:'IOQ' as const };
  return { ok:true, vin: up };
}
function stableStringify(obj: any): string {
  const seen = new WeakSet();
  const sortKeys = (x: any): any => {
    if (x && typeof x === 'object') {
      if (seen.has(x)) return null;
      seen.add(x);
      if (Array.isArray(x)) return x.map(sortKeys);
      return Object.keys(x).sort().reduce((acc: any, k) => { acc[k] = sortKeys(x[k]); return acc; }, {});
    }
    return x;
  };
  return JSON.stringify(sortKeys(obj));
}
function weakETagFrom(obj: unknown) {
  const s = stableStringify(obj);
  const h = crypto.createHash('sha1').update(s).digest('hex');
  return `W/"${h}"`;
}

export async function OPTIONS(req: NextRequest) {
  const origin = req.headers.get('origin');
  return new NextResponse(null, { status: 204, headers: cors(origin) });
}

export async function GET(req: NextRequest, ctx: { params: { vin: string } }) {
  const origin = req.headers.get('origin');
  const headers = cors(origin);

  // Rate-limit per IP
  const ip = clientIp(req);
  const b = rl.get(ip) || { ts: nowSec(), cnt: 0 };
  if (nowSec() - b.ts >= 60) { b.ts = nowSec(); b.cnt = 0; }
  b.cnt += 1; rl.set(ip, b);
  headers['X-RateLimit-Limit'] = `${RL_LIMIT}`;
  headers['X-RateLimit-Remaining'] = `${Math.max(0, RL_LIMIT - b.cnt)}`;
  headers['X-RateLimit-Reset'] = `${b.ts + 60}`;
  if (b.cnt > RL_LIMIT) {
    return NextResponse.json({ error:{ code:'RATE_LIMIT', message:'Too many requests' }}, { status: 429, headers });
  }

  // VIN validator
  const n = normalizeVin(ctx.params.vin);
  if (!n.ok) {
    headers['Cache-Control'] = 'no-store, must-revalidate';
    return NextResponse.json({ error:{ code:'INVALID_VIN', message:'VIN must be 11–17 uppercase, excluding I/O/Q' }}, { status: 422, headers });
  }
  const vin = n.vin;

  // DEV overlay для демонстрации 410 (не влияет на prod)
  if (process.env.DEV_SUPPRESS_VIN && process.env.DEV_SUPPRESS_VIN === vin) {
    headers['Cache-Control'] = 'no-store, must-revalidate';
    return NextResponse.json({ status:'suppressed' }, { status: 410, headers });
  }

  if (!hasDb()) {
    headers['Cache-Control'] = 'no-store, must-revalidate';
    return NextResponse.json({ error:{ code:'NO_DB', message:'Database unavailable' }}, { status: 500, headers });
  }

  try {
    // 1) Наличие VIN
    const res = await query<any>(`
      SELECT *
      FROM core.vehicles
      WHERE vin = $1
      LIMIT 1
    `, [vin], { traceId: req.headers.get('x-trace-id') || undefined });

    if (res.rowCount === 0) {
      headers['Cache-Control'] = 'no-store, must-revalidate';
      return NextResponse.json({ error:{ code:'NOT_FOUND', message:'VIN not found' }}, { status: 404, headers });
    }

    const vrow = res.rows[0] || {};
    // 2) Флаг suppress (поддерживаем несколько вариантов полей)
    const suppressed = Boolean(
      vrow.is_hidden ?? vrow.suppress ?? vrow.suppressed ?? vrow.is_suppressed ?? false
    );
    if (suppressed) {
      headers['Cache-Control'] = 'no-store, must-revalidate';
      return NextResponse.json({ status:'suppressed' }, { status: 410, headers });
    }

    // 3) Доп.данные (безопасные, если таблиц нет — вернём пустые массивы)
    let images: any[] = [];
    let events: any[] = [];
    let lot: any | null = null;
    try {
      const img = await query<any>(`SELECT vin, lot_id, seq, variant, url, storage_key FROM core.images WHERE vin = $1 ORDER BY seq ASC LIMIT 50`, [vin]);
      images = img.rows || [];
    } catch {}
    try {
      const ev = await query<any>(`SELECT vin, lot_id, sale_date, status, final_bid_usd FROM core.sale_events WHERE vin = $1 ORDER BY sale_date DESC, id DESC LIMIT 10`, [vin]);
      events = ev.rows || [];
    } catch {}
    try {
      const l = await query<any>(`SELECT * FROM core.lots WHERE vin = $1 ORDER BY auction_datetime_utc DESC, lot_id DESC LIMIT 1`, [vin]);
      lot = l.rowCount ? l.rows[0] : null;
    } catch {}

    const dto = {
      vin,
      vehicle: vrow,
      currentLot: lot,
      images,
      saleEvents: events,
    };

    // ETag / Last-Modified
    const etag = weakETagFrom(dto);
    headers['ETag'] = etag;
    const updated = vrow.updated_at || vrow.updatedAt || vrow.modified_at || null;
    if (updated) headers['Last-Modified'] = new Date(updated).toUTCString();

    // 304 If-None-Match
    const inm = req.headers.get('if-none-match');
    if (inm && inm === etag) {
      headers['Cache-Control'] = 'public, max-age=60, stale-while-revalidate=300';
      return new NextResponse(null, { status: 304, headers });
    }

    headers['Cache-Control'] = 'public, max-age=60, stale-while-revalidate=300';
    return NextResponse.json(dto, { status: 200, headers });
  } catch (e: any) {
    headers['Cache-Control'] = 'no-store, must-revalidate';
    return NextResponse.json({ error:{ code:'DB_ERROR', message:String(e?.message || e) }}, { status: 500, headers });
  }
}
