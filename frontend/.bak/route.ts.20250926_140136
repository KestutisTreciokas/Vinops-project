import { NextRequest, NextResponse } from 'next/server';
import crypto from 'node:crypto';
import { query, readPresence } from '../../_lib/db';

export const runtime = 'nodejs';
export const dynamic = 'force-dynamic';

const API_VERSION = '1';
const ORIGINS = new Set(['https://vinops.online','https://www.vinops.online']);
const RL_LIMIT = 60; // rpm
const rl: Map<string, { ts: number; cnt: number }> = (globalThis as any).__vinops_rl || new Map();
(globalThis as any).__vinops_rl = rl;

function nowSec(){ return Math.floor(Date.now()/1000); }
function clientIp(req: NextRequest){
  return req.headers.get('cf-connecting-ip') || req.headers.get('x-forwarded-for') || 'anon';
}
function cors(origin: string|null){
  const h: Record<string,string> = {
    'Access-Control-Allow-Methods': 'GET,OPTIONS',
    'Access-Control-Allow-Headers': 'Content-Type, If-None-Match, If-Modified-Since, Accept-Language',
    'Vary': 'Origin, Accept-Language',
    'X-Api-Version': API_VERSION
  };
  if (origin && ORIGINS.has(origin)) h['Access-Control-Allow-Origin'] = origin;
  return h;
}
function normalizeVin(v: string){
  const up = (v||'').toUpperCase().trim();
  if (up.length < 11 || up.length > 17) return { ok:false, reason:'LEN' as const };
  if (!/^[A-Z0-9]+$/.test(up)) return { ok:false, reason:'CHAR' as const };
  if (up.length === 17 && /[IOQ]/.test(up)) return { ok:false, reason:'IOQ' as const };
  return { ok:true, vin: up };
}
function stableStringify(obj: any): string {
  const seen = new WeakSet();
  const sortKeys = (x: any): any => {
    if (x && typeof x === 'object') {
      if (seen.has(x)) return null;
      seen.add(x);
      if (Array.isArray(x)) return x.map(sortKeys);
      return Object.keys(x).sort().reduce((acc: any, k) => { acc[k] = sortKeys(x[k]); return acc; }, {});
    }
    return x;
  };
  return JSON.stringify(sortKeys(obj));
}
function weakETagFrom(obj: unknown) {
  const s = stableStringify(obj);
  const h = crypto.createHash('sha1').update(s).digest('hex');
  return `W/"${h}"`;
}

export async function OPTIONS(req: NextRequest) {
  const origin = req.headers.get('origin');
  return new NextResponse(null, { status: 204, headers: cors(origin) });
}

export async function GET(req: NextRequest, ctx: { params: { vin: string } }) {
  const origin = req.headers.get('origin');
  const headers = cors(origin);

  // RL (per-IP, 60 rpm)
  const ip = clientIp(req);
  const b = rl.get(ip) || { ts: nowSec(), cnt: 0 };
  if (nowSec() - b.ts >= 60) { b.ts = nowSec(); b.cnt = 0; }
  b.cnt += 1; rl.set(ip, b);
  headers['X-RateLimit-Limit'] = `${RL_LIMIT}`;
  headers['X-RateLimit-Remaining'] = `${Math.max(0, RL_LIMIT - b.cnt)}`;
  headers['X-RateLimit-Reset'] = `${b.ts + 60}`;
  if (b.cnt > RL_LIMIT) {
    return NextResponse.json({ error:{ code:'RATE_LIMIT', message:'Too many requests' }}, { status: 429, headers });
  }

  const n = normalizeVin(ctx.params.vin);
  if (!n.ok) {
    headers['Cache-Control'] = 'no-store, must-revalidate';
    return NextResponse.json({ error:{ code:'INVALID_VIN', message:'VIN must be 11–17 uppercase, excluding I/O/Q' }}, { status: 422, headers });
  }
  const vin = n.vin;
  const traceId = crypto.randomUUID();

  // ---- Ранний presence check: 404 / 410 ----
  try {
    const pres = await readPresence(vin);
    if (!pres.exists) {
      headers['Cache-Control'] = 'no-store, must-revalidate';
      return NextResponse.json({ error:{ code:'NOT_FOUND', message:'VIN not found' }}, { status: 404, headers });
    }
    if (pres.suppressed) {
      headers['Cache-Control'] = 'no-store, must-revalidate';
      return NextResponse.json({ status:'suppressed' }, { status: 410, headers });
    }
  } catch (e:any) {
    // если метаданные не прочитались — не мешаем основной выборке, но логируем
    console.warn(JSON.stringify({ lvl:'warn', msg:'presence.probe.fail', traceId, err:e?.message }));
  }

  // ---- Основная выборка (read-only; защита от N+1 – агрегирующие запросы) ----
  // NB: SQL ниже не должен модифицировать данные — DAL блокирует non-SELECT/WITH
  const sql = `
    WITH v AS (
      SELECT vin, year, make, model, trim, updated_at
      FROM vehicles
      WHERE vin = $1 OR vin = $1::text  -- fallback без vin_normalized
      LIMIT 1
    ),
    l AS (
      SELECT *
      FROM lots
      WHERE vin = $1
      ORDER BY auction_datetime_utc DESC
      LIMIT 1
    ),
    i AS (
      SELECT vin, lot_id, seq, variant, url
      FROM images
      WHERE vin = $1 AND variant IN ('thumb','md','xl')
      ORDER BY seq ASC
      LIMIT 120
    ),
    s AS (
      SELECT vin, lot_id, sale_date, status, final_bid_usd
      FROM sale_events
      WHERE vin = $1
      ORDER BY sale_date DESC
      LIMIT 10
    )
    SELECT
      row_to_json(v.*) AS vehicle,
      (SELECT row_to_json(l.*) FROM l) AS current_lot,
      (SELECT coalesce(json_agg(i.* ORDER BY i.seq ASC), '[]'::json) FROM i) AS images,
      (SELECT coalesce(json_agg(s.* ORDER BY s.sale_date DESC), '[]'::json) FROM s) AS sale_events
    FROM v
  `;
  try {
    const r = await query(sql, [vin], { traceId, requestId: traceId });
    if (!r.rowCount || !r.rows[0]?.vehicle) {
      headers['Cache-Control'] = 'no-store, must-revalidate';
      return NextResponse.json({ error:{ code:'NOT_FOUND', message:'VIN not found' }}, { status: 404, headers });
    }
    const row:any = r.rows[0];
    const dto = {
      vin,
      vehicle: row.vehicle || null,
      currentLot: row.current_lot || null,
      images: row.images || [],
      saleEvents: row.sale_events || []
    };

    const etag = weakETagFrom(dto);
    const ifNone = req.headers.get('if-none-match');
    const lmIso = (row.vehicle?.updated_at ? new Date(row.vehicle.updated_at) : null);
    if (ifNone && ifNone === etag) {
      headers['ETag'] = etag;
      if (lmIso) headers['Last-Modified'] = lmIso.toUTCString();
      headers['Cache-Control'] = 'public, max-age=60, stale-while-revalidate=300';
      return new NextResponse(null, { status: 304, headers });
    }

    headers['ETag'] = etag;
    if (lmIso) headers['Last-Modified'] = lmIso.toUTCString();
    headers['Cache-Control'] = 'public, max-age=60, stale-while-revalidate=300';

    return NextResponse.json(dto, { status: 200, headers });
  } catch (e:any) {
    headers['Cache-Control'] = 'no-store, must-revalidate';
    return NextResponse.json({ error:{ code:'INTERNAL', message:'Internal error' }}, { status: 500, headers });
  }
}
