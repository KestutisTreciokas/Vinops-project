import type { Metadata } from 'next';
import { headers } from 'next/headers';

export const revalidate = 0;
export const dynamic = 'force-dynamic';

type Search = {
  make?: string; model?: string;
  year_from?: string; year_to?: string;
  status?: string; damage?: string; title_brand?: string;
  runs_drives?: string; has_keys?: string;
  sort?: string; cursor?: string;
};

function isComplex(sp: URLSearchParams): boolean {
  const keys = ['make','model','year_from','year_to','status','damage','title_brand','runs_drives','has_keys','sort','cursor'];
  const active = keys.filter(k => sp.has(k) && (sp.get(k) ?? '') !== '');
  const onlySimple = active.every(k => ['make','model','year_from','year_to'].includes(k));
  return sp.has('cursor') || (active.length > 2 && !(onlySimple && active.length <= 2));
}

function baseUrl(): string {
  const h = headers();
  const host = h.get('x-forwarded-host') || h.get('host') || '';
  const proto = (h.get('x-forwarded-proto') || 'https');
  return `${proto}://${host}`;
}

async function searchLotsSSR(params: Record<string,string|undefined> & { lang: 'ru' }) {
  const url = new URL(`/api/v1/search`, baseUrl());
  for (const [k,v] of Object.entries(params)) if (v) url.searchParams.set(k, v);
  const r = await fetch(url, { cache: 'no-store', next: { revalidate: 0 }, headers: { 'Accept-Language': params.lang }});
  if (!r.ok) return { items: [] as any[] };
  return r.json();
}

export async function generateMetadata({ searchParams }: { searchParams: Record<string,string|undefined> }): Promise<Metadata> {
  const sp = new URLSearchParams();
  for (const [k,v] of Object.entries(searchParams || {})) if (v) sp.set(k, v);
  const complex = isComplex(sp);
  return {
    title: 'Каталог авто — vinops',
    robots: { index: complex ? false : true, follow: true },
    alternates: { canonical: '/ru/cars' },
  };
}

export default async function Page({ searchParams }: { searchParams: Search }) {
  const data = await searchLotsSSR({ ...searchParams, lang: 'ru' });
  const items = Array.isArray(data?.items) ? data.items : [];

  return (
    <main className="container mx-auto px-4 py-6">
      <h1 className="h1">Каталог</h1>
      <section className="mt-4 grid gap-4 md:grid-cols-2 lg:grid-cols-3">
        {items.length === 0 ? (
          <div className="text-sm text-muted-foreground">Нет данных</div>
        ) : (
          items.slice(0, 12).map((it: any) => (
            <article key={`${it.lotId || it.lot_id || it.vin || Math.random()}`} className="rounded-xl border p-3">
              <div className="text-sm font-medium">{it?.year} {it?.make} {it?.model}</div>
              <div className="text-xs text-muted-foreground">VIN: {it?.vin}</div>
              {it?.status && <div className="text-xs mt-1">Статус: {it.status}</div>}
            </article>
          ))
        )}
      </section>
    </main>
  );
}
